AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Bounce Master game leaderboard API'

Parameters:
  StageName:
    Type: String
    Default: prod
    Description: API Gateway stage name

Resources:
  # DynamoDB Table for storing leaderboard scores
  LeaderboardTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BounceGameLeaderboard
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: player_id
          AttributeType: S
        - AttributeName: score
          AttributeType: N
      KeySchema:
        - AttributeName: player_id
          KeyType: HASH
        - AttributeName: score
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ScoreIndex
          KeySchema:
            - AttributeName: score
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda execution role
  LeaderboardLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt LeaderboardTable.Arn

  # Lambda function for submitting scores
  SubmitScoreLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BounceGameSubmitScore
      Handler: index.submit_score_handler
      Role: !GetAtt LeaderboardLambdaRole.Arn
      Runtime: python3.9
      Timeout: 10
      Environment:
        Variables:
          TABLE_NAME: !Ref LeaderboardTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import uuid
          from datetime import datetime

          # Initialize DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])

          def submit_score_handler(event, context):
              try:
                  # Parse request body
                  if isinstance(event.get('body'), str):
                      body = json.loads(event['body'])
                  else:
                      body = event.get('body', {})
                  player_name = body.get('player_name', 'Anonymous')
                  score = int(body.get('score', 0))

                  # Validate input
                  if score < 0:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'message': 'Score must be a positive number'})
                      }

                  if not player_name or len(player_name) > 50:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'message': 'Player name must be between 1 and 50 characters'})
                      }

                  # Generate a unique ID for the player
                  player_id = str(uuid.uuid4())

                  # Add the score to the leaderboard
                  table.put_item(
                      Item={
                          'player_id': player_id,
                          'player_name': player_name,
                          'score': score,
                          'timestamp': datetime.utcnow().isoformat()
                      }
                  )

                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'message': 'Score submitted successfully'})
                  }
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'message': 'Internal server error'})
                  }

  # Lambda function for getting top scores
  GetTopScoresLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BounceGameGetTopScores
      Handler: index.get_top_scores_handler
      Role: !GetAtt LeaderboardLambdaRole.Arn
      Runtime: python3.9
      Timeout: 10
      Environment:
        Variables:
          TABLE_NAME: !Ref LeaderboardTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import decimal
          from boto3.dynamodb.conditions import Key

          # Helper class to convert Decimal to float for JSON serialization
          class DecimalEncoder(json.JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, decimal.Decimal):
                      return float(obj) if obj % 1 != 0 else int(obj)
                  return super(DecimalEncoder, self).default(obj)

          # Initialize DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])

          def get_top_scores_handler(event, context):
              try:
                  # Get limit parameter (default to 10)
                  limit = 10
                  if event.get('queryStringParameters') and event['queryStringParameters'].get('limit'):
                      limit = int(event['queryStringParameters']['limit'])
                      limit = min(max(1, limit), 100)  # Ensure limit is between 1 and 100

                  # Scan the table to get all scores
                  response = table.scan()
                  items = response.get('Items', [])

                  # Sort by score (descending)
                  sorted_items = sorted(items, key=lambda x: x['score'], reverse=True)

                  # Return the top N scores
                  top_scores = sorted_items[:limit]

                  # Format the response
                  formatted_scores = []
                  for score in top_scores:
                      formatted_scores.append({
                          'player_name': score.get('player_name', 'Anonymous'),
                          'score': score.get('score', 0),
                          'timestamp': score.get('timestamp', '')
                      })

                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'scores': formatted_scores}, cls=DecimalEncoder)
                  }
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'message': 'Internal server error'})
                  }


  # API Gateway REST API
  LeaderboardAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BounceGameLeaderboardAPI
      Description: API for Bounce Master game leaderboard
      EndpointConfiguration:
        Types:
          - REGIONAL
      ApiKeySourceType: HEADER

  # API Gateway resource for scores
  ScoresResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LeaderboardAPI
      ParentId: !GetAtt LeaderboardAPI.RootResourceId
      PathPart: scores

  # API Gateway resource for top scores
  TopScoresResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LeaderboardAPI
      ParentId: !Ref ScoresResource
      PathPart: top

  # API Gateway method for submitting scores (POST /scores)
  SubmitScoreMethod:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - SubmitScoreLambda
    Properties:
      RestApiId: !Ref LeaderboardAPI
      ResourceId: !Ref ScoresResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitScoreLambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  # API Gateway method for getting top scores (GET /scores/top)
  GetTopScoresMethod:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GetTopScoresLambda
    Properties:
      RestApiId: !Ref LeaderboardAPI
      ResourceId: !Ref TopScoresResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestParameters:
        method.request.querystring.limit: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTopScoresLambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: |
            {
              "queryStringParameters": {
                #foreach($param in $input.params().querystring.keySet())
                "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  # Enable CORS for API Gateway resources
  ScoresResourceCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ScoresResource
      RestApiId: !Ref LeaderboardAPI
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  TopScoresResourceCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref TopScoresResource
      RestApiId: !Ref LeaderboardAPI
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda permissions for API Gateway
  SubmitScoreLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SubmitScoreLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LeaderboardAPI}/*/POST/scores

  GetTopScoresLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetTopScoresLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LeaderboardAPI}/*/GET/scores/top

  # API Gateway deployment
  LeaderboardAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SubmitScoreMethod
      - GetTopScoresMethod
      - SubmitScoreLambdaPermission
      - GetTopScoresLambdaPermission
      - ScoresResourceCORS
      - TopScoresResourceCORS
    Properties:
      RestApiId: !Ref LeaderboardAPI
      StageName: !Ref StageName

  # API Gateway usage plan
  LeaderboardUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - LeaderboardAPI
      - LeaderboardAPIDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref LeaderboardAPI
          Stage: !Ref StageName
      Description: Usage plan for Bounce Master game leaderboard API
      Quota:
        Limit: 1000
        Period: DAY
      Throttle:
        BurstLimit: 10
        RateLimit: 5

  # API key for authentication
  LeaderboardApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - LeaderboardAPIDeployment
      - LeaderboardAPI
    Properties:
      Name: BounceGameApiKey
      Description: API key for Bounce Master game
      Enabled: true

  # Associate API key with usage plan
  LeaderboardUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - LeaderboardUsagePlan
      - LeaderboardApiKey
    Properties:
      KeyId: !Ref LeaderboardApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref LeaderboardUsagePlan

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${LeaderboardAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}

  ApiKeyId:
    Description: API Key ID (use 'aws apigateway get-api-key --api-key [ApiKeyId] --include-value' to get the actual key)
    Value: !Ref LeaderboardApiKey

  TableName:
    Description: DynamoDB table name
    Value: !Ref LeaderboardTable
